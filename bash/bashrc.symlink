export EDITOR="vim"

# Following from Arch wiki
##########################################################
############# Colours in bash config #####################
##########################################################


# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS. Try to use the external file
# first to take advantage of user additions. Use internal bash
# globbing instead of external grep binary.

# sanitize TERM:
safe_term=${TERM//[^[:alnum:]]/?}
match_lhs=""

[[ -f ~/.dir_colors ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs} ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)

if [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] ; then
	
	# we have colors :-)

	# Enable colors for ls, etc. Prefer ~/.dir_colors
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	#PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\\$\[\033[00m\] "

	# Use this other PS1 string if you want \W for root and \w for all other users:
	# PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h\[\033[01;34m\] \W'; else echo '\[\033[01;32m\]\u@\h\[\033[01;34m\] \w'; fi) \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\\$\[\033[00m\] "

	alias ls="ls --color=auto"
	alias dir="dir --color=auto"
	alias grep="grep --color=auto"
	alias dmesg='dmesg --color'
	man() {
	    env LESS_TERMCAP_mb=$'\E[01;31m' \
	    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
	    LESS_TERMCAP_me=$'\E[0m' \
	    LESS_TERMCAP_se=$'\E[0m' \
	    LESS_TERMCAP_so=$'\E[38;5;246m' \
	    LESS_TERMCAP_ue=$'\E[0m' \
	    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
	    man "$@"
	}

else

	# show root@ when we do not have colors

	PS1="\u@\h \w \$([[ \$? != 0 ]] && echo \":( \")\$ "

	# Use this other PS1 string if you want \W for root and \w for all other users:
	# PS1="\u@\h $(if [[ ${EUID} == 0 ]]; then echo '\W'; else echo '\w'; fi) \$([[ \$? != 0 ]] && echo \":( \")\$ "

fi

PS2="> "
PS3="> "
PS4="+ "


##########################################################
############# Colours in bash config  end ################
##########################################################

# added by Miniconda3 3.19.0 installer
export PATH="/home/gavin/miniconda3/bin:$PATH"

# ssh-agent
if ! pgrep -u $USER ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval $(<~/.ssh-agent-thing)
fi
ssh-add -l >/dev/null || alias ssh='ssh-add -l >/dev/null || ssh-add && unalias ssh; ssh'

# added by Miniconda3 4.0.5 installer
export PATH="/home/gavin/miniconda3/bin:$PATH"

# added for mosh compatibility
export LANG="en_GB.UTF-8"

# termux backup
export TERMUX=/data/data/com.termux/files
DATE=`date +%Y-%m-%d`
export BACKUPLOC=$HOME/storage/downloads/termux_$DATE.tar.gz
alias termux-backup='tar -czvf $BACKUPLOC --exclude=$HOME/storage $TERMUX'

# always open tmux on ssh
if [[ -z "$TMUX" ]] && [ "$SSH_CONNECTION" != "" ]; then
    tmux attach-session -t ssh_tmux || tmux new-session -s ssh_tmux
fi

# alias for git https credential storing
alias git-store-credentials='git config credential.helper store'

# this was for i3 but isn't actually used
if [[ $HOSTNAME == vws83 ]]; then
    export TERMINAL=rxvt-unicode
fi


# https://stackoverflow.com/questions/10735574/include-source-script-if-it-exists-in-bash 
# for alias to quick start project environments/other shortcuts
include () {
        [[ -f "$1" ]] && source "$1"
    }
include .projectsrc

# for tmux autocomplete
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# https://www.nathankowald.com/blog/2014/03/tmux-attach-session-alias/
_tma() {
    TMUX_SESSIONS=$(tmux ls -F '#S' | xargs)

    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "$TMUX_SESSIONS" -- $cur) )
}
complete -F _tma tma
tma() { tmux attach -t $1 ;}
complete -F _tma tma
tmc() { tmux new-session -t $1 ;}
