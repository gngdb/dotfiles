# If not running interactively, don't do anything
[[ $- == *i* ]] || return
# because https://unix.stackexchange.com/questions/18231/scp-fails-without-error

export EDITOR="vim"

# Following from Arch wiki
##########################################################
############# Colours in bash config #####################
##########################################################


# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS. Try to use the external file
# first to take advantage of user additions. Use internal bash
# globbing instead of external grep binary.

# sanitize TERM:
safe_term=${TERM//[^[:alnum:]]/?}
match_lhs=""

[[ -f ~/.dir_colors ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs} ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)

if [[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] ; then
	
	# we have colors :-)

	# Enable colors for ls, etc. Prefer ~/.dir_colors
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	#PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\\$\[\033[00m\] "

	# Use this other PS1 string if you want \W for root and \w for all other users:
	# PS1="$(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h\[\033[01;34m\] \W'; else echo '\[\033[01;32m\]\u@\h\[\033[01;34m\] \w'; fi) \$([[ \$? != 0 ]] && echo \"\[\033[01;31m\]:(\[\033[01;34m\] \")\\$\[\033[00m\] "

	alias ls="ls --color=auto"
	alias dir="dir --color=auto"
	alias grep="grep --color=auto"
	alias dmesg='dmesg --color'
	man() {
	    env LESS_TERMCAP_mb=$'\E[01;31m' \
	    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
	    LESS_TERMCAP_me=$'\E[0m' \
	    LESS_TERMCAP_se=$'\E[0m' \
	    LESS_TERMCAP_so=$'\E[38;5;246m' \
	    LESS_TERMCAP_ue=$'\E[0m' \
	    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
	    man "$@"
	}

else

	# show root@ when we do not have colors

	PS1="\u@\h \w \$([[ \$? != 0 ]] && echo \":( \")\$ "

	# Use this other PS1 string if you want \W for root and \w for all other users:
	# PS1="\u@\h $(if [[ ${EUID} == 0 ]]; then echo '\W'; else echo '\w'; fi) \$([[ \$? != 0 ]] && echo \":( \")\$ "

fi

PS2="> "
PS3="> "
PS4="+ "


##########################################################
############# Colours in bash config  end ################
##########################################################

# ssh-agent
if ! pgrep -u $USER ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval $(<~/.ssh-agent-thing)
fi
ssh-add -l >/dev/null || alias ssh='ssh-add -l >/dev/null || ssh-add && unalias ssh; ssh'
# if the ssh-agent-thing file is lost
refresh-agent() {
    pkill -u $USER ssh-agent
    ssh-agent > ~/.ssh-agent-thing
    ssh-add
}

# added for mosh compatibility
export LANG="en_GB.UTF-8"

# termux backup
export TERMUX=/data/data/com.termux/files
DATE=`date +%Y-%m-%d`
export BACKUPLOC=$HOME/storage/downloads/termux_$DATE.tar.gz
alias termux-backup='tar -czvf $BACKUPLOC --exclude=$HOME/storage $TERMUX'

# always open tmux in termux
# if [[ -z "$TMUX" ]] && [ "$SSH_CONNECTION" != "" ] && [ "$SSH_CONNECTION" != "" ]; then
#    tmux attach-session -t ssh_tmux || tmux new-session -s ssh_tmux
# fi

# function for ssh with automatic retry to a named tmux session
# forever-terminal <hostname> <tmux session name>
forever-terminal() {
    while true
    do
        ssh $1 -t "tmux attach-session -t $2 || tmux new-session -s $2"
        sleep 3
    done
}
# forever-tunnel <hostname> <local port> <remote port>
forever-tunnel() {
    while true
    do
        ssh $1 -L $2:127.0.0.1:$3 -N
        sleep 10
    done
}

# alias for git https credential storing
alias git-store-credentials='git config credential.helper store'

# this was for i3 but isn't actually used
if [[ $HOSTNAME == vws83 ]]; then
    export TERMINAL=rxvt-unicode
fi

# https://stackoverflow.com/questions/10735574/include-source-script-if-it-exists-in-bash 
# for alias to quick start project environments/other shortcuts
include () {
        [[ -f "$1" ]] && source "$1"
    }
include ~/.projectsrc

# for tmux autocomplete
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# https://www.nathankowald.com/blog/2014/03/tmux-attach-session-alias/
_tma() {
    TMUX_SESSIONS=$(tmux ls -F '#S' | xargs)

    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "$TMUX_SESSIONS" -- $cur) )
}
complete -F _tma tma
tma() { tmux attach -t $1 ;}
complete -F _tma tma
tmc() { tmux new-session -t $1 ;}

# for making lockscreen images
set-i3lock-bg() { 
        if [ ! -f ~/lock.png ]; then
            curl https://raw.githubusercontent.com/meskarune/i3lock-fancy/master/icons/lock.png > ~/lock.png
        fi
        SIZE=`xdpyinfo | grep dimensions | cut -d " "  -f 7`
        convert $1 -font Liberation-Sans \
       -geometry $SIZE -gravity center\
       -blur 5x8 \
       -pointsize 26 -fill white \
       -background black -extent $SIZE -gravity center \
       -annotate +0+160 "Type Password to Unlock" ~/lock.png \
       -gravity center -composite ~/i3lock-background.png
}

# Arch Wiki SSH-keygen
ssh-keygen-archdefault() { ssh-keygen -C "$(whoami)@$(hostname)-$(date -I) -b 4096" ;}

# I always forget conda remove syntax
condont() { conda remove --name $1 --all ;}

# for adding environment variables to conda envs
# https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#macos-and-linux
# conda-addto-env <var to set> <what to set it to>
conda-addto-env() {
    mkdir -p $CONDA_PREFIX/etc/conda/activate.d
    mkdir -p $CONDA_PREFIX/etc/conda/deactivate.d
    TO_SET="export $1=$2"
    CENV_FILE=$CONDA_PREFIX/etc/conda/activate.d/env_vars.sh
    read -p "writing $TO_SET to $CENV_FILE, y/n? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo $TO_SET >> $CENV_FILE
    else
        echo "no response or n, not writing"
        return
    fi
    # just reset variables to whatever they're set when you run a new shell
    RESET_VARS=`bash -lc "env" | grep $1`
    for var in $RESET_VARS
    do
        echo "export $var" >> $CONDA_PREFIX/etc/conda/deactivate.d/env_vars.sh
    done
    # if it wasn't set to anything, just unset it
    if [[ -z ${RESET_VARS} ]]; then
        echo "unset $1" >> $CONDA_PREFIX/etc/conda/deactivate.d/env_vars.sh
    fi
    # cat the files, so we know what's in there
    echo "File contents $CENV_FILE:"
    cat $CENV_FILE | sed 's/^/  /' 
    echo "File contents $CONDA_PREFIX/etc/conda/deactivate.d/env_vars.sh:"
    cat $CONDA_PREFIX/etc/conda/deactivate.d/env_vars.sh | sed 's/^/  /' 
}

# to clean up vars from the previous command
conda-clean-env() {
    ACTIVATE=$CONDA_PREFIX/etc/conda/activate.d/env_vars.sh
    DEACTIVATE=$CONDA_PREFIX/etc/conda/deactivate.d/env_vars.sh 
    read -p "cleaning env files $ACTIVATE and $DEACTIVATE, y/n? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "mving to env_vars.sh.backup"
        mv $ACTIVATE $ACTIVATE.backup
        mv $DEACTIVATE $DEACTIVATE.backup
    fi
}

# shortcuts I'm trying to learn
echo "vim"
echo "  paste on prev/next line [p/]p"

# generating passwords https://unix.stackexchange.com/questions/230673/how-to-generate-a-random-string
alias mkpw="head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13 ; echo ''"

# https://stackoverflow.com/questions/1795976/can-the-unix-list-command-ls-output-numerical-chmod-permissions 
alias cls="ls -la | awk '{k=0;for(i=0;i<=8;i++)k+=((substr(\$1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(\"%0o \",k);print}'"
